1,在计算机系统里面，数值用（）存储？ A，原码；B，补码； C，反码； D：unicode码
选B，
  1，计算机用二进制存储，正数的原码，反码，补码是其本身。
  2，计算机的CPU只有加法器，没有减法器
  3，计算机中用二进制表示负数，规定最高位为符号位，0为正数，1是负数，负数的反码就是符号位不变，其它全部取反，补码就是
  反码加1，比如1001，反码就是1110，补码就是1111，其实这个数是-1，-1+1就是0即用补码相加：1111+0001=0000即0。
  反过来如果一个数为1111，其实要先减1（1110），除符号位再取反（1001），这时候才是真正的值：-1


2，字符常量
字符常量是指用一对单引号括起来的一个字符。如‘a’，‘9’，‘!’。字符常量中的单引号只起定界作用并不表示字符本身。

所谓字符常量，就是用英文单引号括起来的一个字符。在使用字符常量时应该注意：
  1．单引号内的大小写字符代表不同的字符常量，例如‘Y’、‘y’是两个不同的字符常量。
  2．字符常量只能用英文单引号括起来，不能用双引号。例如“Y”不是一个字符常量，而是一个字符串。
  3．单引号内如果是一个空格符，也是一个字符常量。
  4．单引号内只能包含1个字符，‘xyz’写法是错误的。但超过1个的字符的话，除最后一个外前面的会自动失效，当然这在编程使用中应该避免。
  5．字符常量的值，就是它在ASCII编码表中的值。是个从0—127之间的整数。因此字符常量可以作为整型数据来进行运算。例如：
  表达式‘Y’+32的值为121，也就是‘y’的值。
  表达式‘7’+‘6’的值为109，通过查表可以发现，刚好是‘m’的值。应该注意‘7’和7是不一样的，作为字符常量所代表的整型常量值是55，后者是整型常量7。
  单引号括起来的字符包括英文字母大、小写字符各26个、数字字符10个，以及空白符(空格符、制表符、换行符)，标点和特殊符号(键盘上的共30个)，它们也称为C语言的基本字符集。

3，定点16位字符长的字，采用2的补码形式表示时，一个字所能表示的整数范围是。
A -2^15到2^15 -1 B -2^15-1到2^15-1  C -2^15+1到2^15-1 D -2^15到2^15
最大值就是0111 1111 1111 1111 ,即2^15-1
最小值就是1000 0000 0000 0000 ，即-2^15，为啥呢？
  反推：反码（减1，但是符号位不动）为1111 1111 1111 1111 ，原码（再取反，符号位不动）为：1000 0000 0000 0000。
  其实，1000 0000 0000 0000可以看作是-0的原码，而0000 0000 0000 0000为+0，但是不能有两个0，所以就将1000 0000 0000 0000
  规定为-128，即-128的补码。

4，下列功能相同的一组dos命令是：
A copy -- diskcopy   B ren -- rename C comp -- diskcomp D dir--type
答案为B
A是复制和整盘复制（备份时用较多） B都是重命名
C是比较文件和比较软盘（不能用于硬盘） D列出文件目录和显示文件内容

5，一个完整的计算机系统的组成部分有（）
1，硬件和软件系统；  2，运算器，存储器，控制器； 3，外部设备和主机； 4，硬设备和应用程序；
选1
一个完整的计算机系统由硬件系统和软件系统组成；硬件系统组成部分：控制器，运算器，存储器，输入设备，输出设备；软件系统由系统软件和应用软件组成。

6，java用（）机制实现了进程之间的同步执行（可能出题错误：应该为异步执行）
1，监视器； 2，虚拟机；3，多个CPU； 4，异步调用。
选1
首先jvm中没有进程的概念；但是jvm中的线程映射为操作系统中的进程，对应关系为1：1。那这道题的问的就是jvm中线程如何异步执行。在jvm中是使用监视器锁来实现不同线程
的异步执行，在语法的表现就是synchronized.

7,判断对错。在java的多态调用中，new的是哪一个类就是调用哪个类的方法。
1，对； 2，错
选2
参考例子：FatherAndSonClass

8，socket编程中，以下哪个socket编程中，以下哪个socket的操作是不属于服务端操作的（）？
1，accept;  2,listen;  3,connect;  4,close
选3，属于客户端操作。

TCP客户端： 
  1.建立连接套接字，设置Ip和端口监听，socket()
  2.建立连接 connect
  3.write() 获取网络流对象 发送数据
  4.read()获取网络流对象 接收数据
  5.关闭套接字

TCP服务器端
  1.建立端口监听 socket()
  2.绑定指定端口 bind()
  3.listen 进行端口监听
  4.accept() 阻塞式 直到有客户端访问
  5.read()获取客户端发送数据
  6.write()发送返回数据
  7.close关闭端口监听

测试举例参考：ClientTest,ServerTest